using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;
using System.Numerics;
using Content.Shared.FixedPoint;
using Robust.Client.Graphics;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Chemistry.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedChemMasterComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class ChemMasterWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action<BaseButton.ButtonEventArgs, ReagentButton>? OnReagentButtonPressed;
        public readonly Button[] PillTypeButtons;

        private const string PillsRsiPath = "/Textures/Objects/Specific/Chemistry/pills.rsi";
        // Declares a cache for the last sent state from server.
        // This is needed to allow for lists to repopulate when switching between input and output tabs.
        private ChemMasterBoundUserInterfaceState? _currentState;

        /// <summary>
        /// Create and initialize the chem master UI client-side. Creates the basic layout,
        /// actual data isn't filled in until the server sends data about the chem master.
        /// </summary>
        public ChemMasterWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            // Pill type selection buttons, in total there are 20 pills.
            // Pill rsi file should have states named as pill1, pill2, and so on.
            var resourcePath = new ResPath(PillsRsiPath);
            var pillTypeGroup = new ButtonGroup();
            PillTypeButtons = new Button[20];
            for (uint i = 0; i < PillTypeButtons.Length; i++)
            {
                // For every button decide which stylebase to have
                // Every row has 10 buttons
                String styleBase = StyleBase.ButtonOpenBoth;
                uint modulo = i % 10;
                if (i > 0 && modulo == 0)
                    styleBase = StyleBase.ButtonOpenRight;
                else if (i > 0 && modulo == 9)
                    styleBase = StyleBase.ButtonOpenLeft;
                else if (i == 0)
                    styleBase = StyleBase.ButtonOpenRight;

                // Generate buttons
                PillTypeButtons[i] = new Button
                {
                    Access = AccessLevel.Public,
                    StyleClasses = { styleBase },
                    MaxSize = new Vector2(42, 28),
                    Group = pillTypeGroup
                };

                // Generate buttons textures
                var specifier = new SpriteSpecifier.Rsi(resourcePath, "pill" + (i + 1));
                TextureRect pillTypeTexture = new TextureRect
                {
                    Texture = specifier.Frame0(),
                    TextureScale = new Vector2(1.75f, 1.75f),
                    Stretch = TextureRect.StretchMode.KeepCentered,
                };

                PillTypeButtons[i].AddChild(pillTypeTexture);
                Grid.AddChild(PillTypeButtons[i]);
            }

            PillDosage.InitDefaultButtons();
            PillNumber.InitDefaultButtons();
            BottleDosage.InitDefaultButtons();

            // Ensure label length is within the character limit.
            LabelLineEdit.IsValid = s => s.Length <= SharedChemMaster.LabelMaxLength;

            Tabs.SetTabTitle(0, Loc.GetString("chem-master-window-input-tab"));
            Tabs.SetTabTitle(1, Loc.GetString("chem-master-window-output-tab"));
            // Subscribe to tab changes.
            Tabs.OnTabChanged += OnTabChanged;
        }

        private ReagentButton MakeReagentButton(string text, ChemMasterReagentAmount amount, ReagentId id, bool isBuffer, string styleClass)
        {
            var button = new ReagentButton(text, amount, id, isBuffer, styleClass);
            button.OnPressed += args
                => OnReagentButtonPressed?.Invoke(args, button);
            return button;
        }
        /// <summary>
        /// Conditionally generates a set of reagent buttons based on the supplied boolean argument.
        /// </summary>
        private List<ReagentButton> CreateReagentButtonConstructors(ReagentId reagent, bool isBuffer, bool isInput)
        {
            if (!isInput)
                return new List<ReagentButton>(); // Return an empty list if button creation is disabled.

            var buttonConfigs = new (string text, ChemMasterReagentAmount amount, string styleClass)[]
            {
                ("1", ChemMasterReagentAmount.U1, StyleBase.ButtonOpenBoth),
                ("5", ChemMasterReagentAmount.U5, StyleBase.ButtonOpenBoth),
                ("10", ChemMasterReagentAmount.U10, StyleBase.ButtonOpenBoth),
                ("25", ChemMasterReagentAmount.U25, StyleBase.ButtonOpenBoth),
                ("50", ChemMasterReagentAmount.U50, StyleBase.ButtonOpenBoth),
                ("100", ChemMasterReagentAmount.U100, StyleBase.ButtonOpenBoth),
                (Loc.GetString("chem-master-window-buffer-all-amount"), ChemMasterReagentAmount.All, StyleBase.ButtonOpenLeft),
            };

            var buttons = new List<ReagentButton>();

            foreach (var (text, amount, styleClass) in buttonConfigs)
            {
                var button = MakeReagentButton(text, amount, reagent, isBuffer, styleClass);
                buttons.Add(button);
            }

            return buttons;
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (ChemMasterBoundUserInterfaceState) state;
            _currentState = castState;
            
            if (castState.UpdateLabel)
                LabelLine = GenerateLabel(castState);
            UpdatePanelInfo(castState);

            var output = castState.OutputContainerInfo;

            BufferCurrentVolume.Text = $" {castState.BufferCurrentVolume?.Int() ?? 0}u";

            InputEjectButton.Disabled = castState.InputContainerInfo is null;
            OutputEjectButton.Disabled = output is null;
            CreateBottleButton.Disabled = output?.Reagents == null;
            CreatePillButton.Disabled = output?.Entities == null;

            var remainingCapacity = output is null ? 0 : (output.MaxVolume - output.CurrentVolume).Int();
            var holdsReagents = output?.Reagents != null;
            var pillNumberMax = holdsReagents ? 0 : remainingCapacity;
            var bottleAmountMax = holdsReagents ? remainingCapacity : 0;

            PillTypeButtons[castState.SelectedPillType].Pressed = true;
            PillNumber.IsValid = x => x >= 0 && x <= pillNumberMax;
            PillDosage.IsValid = x => x > 0 && x <= castState.PillDosageLimit;
            BottleDosage.IsValid = x => x >= 0 && x <= bottleAmountMax;

            if (PillNumber.Value > pillNumberMax)
                PillNumber.Value = pillNumberMax;
            if (BottleDosage.Value > bottleAmountMax)
                BottleDosage.Value = bottleAmountMax;
        }
        //forces the UI to refresh using cached data on swapping tab
        private void OnTabChanged(int tabIndex)
        {
            if (_currentState != null)
            {
                UpdatePanelInfo(_currentState);
            }
        }
        /// <summary>
        /// Generate a product label based on reagents in the buffer.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        private string GenerateLabel(ChemMasterBoundUserInterfaceState state)
        {
            if (state.BufferCurrentVolume == 0)
                return "";

            var reagent = state.BufferReagents.OrderBy(r => r.Quantity).First().Reagent;
            _prototypeManager.TryIndex(reagent.Prototype, out ReagentPrototype? proto);
            return proto?.LocalizedName ?? "";
        }

        /// <summary>
        /// Update the container, buffer, and packaging panels.
        /// </summary>
        /// <param name="state">State data for the dispenser.</param>
        private void UpdatePanelInfo(ChemMasterBoundUserInterfaceState state)
        {
            BufferTransferButton.Pressed = state.Mode == ChemMasterMode.Transfer;
            BufferDiscardButton.Pressed = state.Mode == ChemMasterMode.Discard;

            BuildContainerUI(InputContainerInfo, state.InputContainerInfo);
            BuildContainerUI(OutputContainerInfo, state.OutputContainerInfo);

            BufferInfo.Children.Clear();

            if (!state.BufferReagents.Any())
            {
                BufferInfo.Children.Add(new Label { Text = Loc.GetString("chem-master-window-buffer-empty-text") });

                return;
            }

            var bufferHBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal
            };
            BufferInfo.AddChild(bufferHBox);

            var bufferLabel = new Label { Text = $"{Loc.GetString("chem-master-window-buffer-label")} " };
            bufferHBox.AddChild(bufferLabel);
            var bufferVol = new Label
            {
                Text = $"{state.BufferCurrentVolume}u",
                StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
            };
            bufferHBox.AddChild(bufferVol);

            // initialises count of loop for purposes of alternating background color each row,
            // and also initialises the two color values for alternating in the buffer window.

            var rowCount = 0;
            var rowColor1 = Color.FromHex("#202025");
            var rowColor2 = Color.FromHex("#1B1B1E");

            foreach (var (reagent, quantity) in state.BufferReagents)
            {
                // Iterate rowCount and then set backgroundColor accordingly.
                // TODO: Make this striped list thing into its own Control
                rowCount++;
                var currentRowColor = (rowCount % 2 == 1) ? rowColor1 : rowColor2;
                var isInput = true;
                BufferInfo.Children.Add(BuildReagentRow(currentRowColor, reagent, quantity, true, isInput, false));
            }
        }
        
        private void BuildContainerUI(Control control, ContainerInfo? info)
        {
            control.Children.Clear();

            if (info is null)
            {
                control.Children.Add(new Label
                {
                    Text = Loc.GetString("chem-master-window-no-container-loaded-text")
                });
                return;
            }

            // Name of the container and its fill status (Ex: 44/100u)
            control.Children.Add(new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                Children =
                {
                    new Label { Text = $"{info.DisplayName}: " },
                    new Label
                    {
                        Text = $"{info.CurrentVolume}/{info.MaxVolume}",
                        StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                    }
                }
            });
            
            IEnumerable<(string name, ReagentId Id, FixedPoint2 Quantity)> contents;
            // initialises count of loop for purposes of alternating background color each row,
            // and also initialises the two color values for alternating in the buffer window.
            var rowCount = 0;
            var rowColor1 = Color.FromHex("#202025");
            var rowColor2 = Color.FromHex("#1B1B1E");
            var currentTab = Tabs.CurrentTab;
            if (info.Entities != null)
            {
                foreach (var entity in info.Entities)
                {
                    var reagent = default(ReagentId);
                    var quantity = entity.Quantity;
                    if (currentTab == 1)
                    {
                        
                        var currentRowColor = (rowCount % 2 == 1) ? rowColor1 : rowColor2;
                        control.Children.Add(BuildReagentRow(currentRowColor, reagent, quantity, true, false, true));
                    }
                }
            }
            if (info.Reagents != null)
            {
                contents = info.Reagents.Select(x => (x.Reagent.Prototype, x.Reagent, x.Quantity));
                foreach (var (name, reagent, quantity) in contents)
                {
                    // Increment rowCount and then set backgroundColor accordingly.
                    rowCount++;
                    var currentRowColor = (rowCount % 2 == 1) ? rowColor1 : rowColor2;
                    
                    if (currentTab == 0)
                    {
                        control.Children.Add(BuildReagentRow(currentRowColor, reagent, quantity, false, true, false));
                    }
                }
            }
        }

        private Control BuildReagentRow(Color rowColor, ReagentId reagent, FixedPoint2 quantity, bool isBuffer, bool isInput, bool isEntity)
        {
            Color reagentColor = rowColor;
            if (isEntity)
            {
                return new Label { Text = $"{reagent}: " };
            }
            // Try to get the prototype for the given reagent. This gives us its name and allows for SubstanceColor.
            _prototypeManager.TryIndex(reagent.Prototype, out ReagentPrototype? proto);
            if (proto is null)
            {
                // If the prototype is null, displays a placeholder text
                return new Label { Text = Loc.GetString("chem-master-window-unknown-reagent-text") };
            }
            else
            {
                reagentColor = proto.SubstanceColor;
            }

            var name = proto.LocalizedName;
            
            //entities are not reagents, so they will have their panels be the same color as the background.
            if (reagentColor == default)
            {
                reagentColor = rowColor;
            }

            var reagentButtonConstructors = CreateReagentButtonConstructors(reagent, isBuffer, isInput);
            
            // Create the row layout with the color panel
            var rowContainer = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                Children =
                {
                    new Label { Text = $"{name}: " },
                    new Label
                    {
                        Text = $"{quantity}u",
                        StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                    },

                    // Padding
                    new Control { HorizontalExpand = true },
                    // Colored panels for reagents
                    new PanelContainer
                    {
                        Name = "colorPanel",
                        VerticalExpand = true,
                        MinWidth = 4,
                        PanelOverride = new StyleBoxFlat
                        {
                            BackgroundColor = reagentColor
                        },
                        Margin = new Thickness(0, 1)
                    }
                }
            };

            // Add the reagent buttons after the color panel
            foreach (var button in reagentButtonConstructors)
            {
                rowContainer.AddChild(button);
            }

            return new PanelContainer
            {
                PanelOverride = new StyleBoxFlat(rowColor),
                Children = { rowContainer }
            };
        }
        
        public string LabelLine
        {
            get => LabelLineEdit.Text;
            set => LabelLineEdit.Text = value;
        }
    }

    public sealed class ReagentButton : Button
    {
        public ChemMasterReagentAmount Amount { get; set; }
        public bool IsBuffer = true;
        public ReagentId Id { get; set; }
        public ReagentButton(string text, ChemMasterReagentAmount amount, ReagentId id, bool isBuffer, string styleClass)
        {
            AddStyleClass(styleClass);
            Text = text;
            Amount = amount;
            Id = id;
            IsBuffer = isBuffer;
        }
    }
}
